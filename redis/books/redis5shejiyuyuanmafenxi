# 2. 简单动态字符串

## 2.1 数据结构

二进制安全: C语言中, 用“\0”表示字符串的结束, 如果字符串中本身就有"\0"字符, 字符串就会被截断, 即非二进制安全. 若通过某个机制, 保证读写字符串不损害其内容, 则是二进制安全.

#### <tips:
```c
struct __attribute__ ((__packed__))sdshdr5 {
	unsigned char flags;
	char buf[];
}

//__attribute__ ((packed)) 的作用就是告诉编译器取消结构在编译过程中的优化对齐,按照实际占用字节数进行对齐，是GCC特有的语法。
```
#### tips>

源码中的__attribute__((__packed__))需要重点关注, 一般情况下, 结构体会按其所有变量大小的最小公倍数做字节对齐, 而用packed修饰后, 结构体则变成按1字节对齐.

## 2.2 基本操作

### 2.2.3 拼接字符串

拼接字符串涉及sds的扩容, redis的sds有如下扩容策略:
* 若sds中剩余空间长度大于新增内容的长度, 直接在柔性数组buf末尾追加即可, 无须扩容;
* 若sds中剩余空间长度小于或等于新增内容的长素, 分情况讨论. 新增后总长度小于1M的, 按新长度的2倍扩容; 大于1M的, 按新长度+1M扩容;
* 最后根据新长度重新选取存储类型, 并分配空间. 若无须改变类型, 则通过realloc扩大柔性数组即可. 否则需要重新开辟内存, 并将原字符串的buf内容移动到新位置.


## 2.3 本章小结

1. SDS是如何兼容c语言字符串?
sds对象中的buf是一个柔性数组, 上层调用时, sds直接返回了buf, 由于buf是直接指向内容的指针, 故兼容C语言函数.

2. sdshdr5的特殊之处是什么?
sdshdr5只负责存储小于32bytes的字符串. 一般情况下, 小字符串的存储更普遍, 故redis进一步压缩了sdshdr5的数据结构, 将sdshdr5的类型和长度放入了同一个属性中, 用flags的低三位存储类型, 高五位存储长度. 创建空字符串时, sdshdr5会被sdshdr8替代.


# 3. 跳跃表

对于有序集合的底层实现, 可以使用数组、链表、平衡树等结构. 数组不便于元素的插入和删除, 链表的查询效率低, 需要遍历所有元素. 平衡树或红黑树等结构虽然效率高但是实现复杂. redis采用了一种新型的数据结构-跳跃表. 跳跃表的效率堪比红黑树, 然而实现却远比红黑树简单.

